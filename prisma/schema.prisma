generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  locale    String   @default("en-IN")
  currency  String   @default("INR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  categories    Category[]
  budgets       Budget[]
  transactions  Transaction[]
  recurringRules RecurringRule[]
}

model Account {
  id       String      @id @default(cuid())
  userId   String
  name     String
  type     AccountType
  currency String      @default("INR")
  balance  Float       @default(0)
  archived Boolean     @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  toTransactions Transaction[] @relation("ToAccount")

  @@index([userId])
}

model Category {
  id    String       @id @default(cuid())
  userId String
  name  String
  kind  CategoryKind
  color String       @default("#3b82f6")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgets      Budget[]
  transactions Transaction[]

  @@index([userId])
}

model Budget {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  month      String   // YYYY-MM format
  amount     Float
  rollover   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, month])
  @@index([userId, month])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  currency    String          @default("INR")
  date        DateTime
  accountId   String
  toAccountId String?
  categoryId  String?
  merchant    String?
  note        String?
  tags        Json?
  splitOf     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  toAccount Account?  @relation("ToAccount", fields: [toAccountId], references: [id], onDelete: SetNull)
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId, date])
  @@index([userId, type])
}

model RecurringRule {
  id         String    @id @default(cuid())
  userId     String
  type       TransactionType
  amount     Float
  accountId  String
  categoryId String?
  merchant   String?
  cadence    Cadence
  nextRun    DateTime
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, nextRun])
}

enum AccountType {
  CASH
  BANK
  WALLET
  CREDIT
}

enum CategoryKind {
  EXPENSE
  INCOME
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

enum Cadence {
  WEEKLY
  MONTHLY
  CUSTOM
}